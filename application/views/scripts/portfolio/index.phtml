<article>
    <p>Here is a list of notable Web projects that I have worked on, either alone or with others, ordered from most recent to oldest, with the years in which the projects were in active development displayed to the right of the project name. In the sub-heading of each site I have listed a few of the <strong>significant</strong> technologies/languages/services used - e.g. CSS and JavaScript won't be listed unless they played a large part in the project.</p>
    <p>The project names are links that will take you to the site in question, a demonstration of the software, or a gallery of screenshots from the project if the project isn't publicly available (whichever is applicable).</p>
</article>

<section class="portfoliosite">
    <h2><a href="http://www.andrewgillard.com/">Andrew's Stuff</a><span class="pfdate">2012</span></h2>
    <h3><span class="pftech">PHP; MySQL; <a href="http://framework.zend.com/">Zend Framework</a>; HTML5; CSS3; <a href="https://dev.twitter.com/">Twitter</a> &amp; <a href="http://www.flickr.com/services/api/">Flickr</a> APIs</span></h3>
    <aside><a href="<?php echo $this->baseUrl() ?>/img/portfolio/andrewgillardcom.png">
        <img src="<?php echo $this->baseUrl() ?>/img/portfolio/th_andrewgillardcom.jpg" alt="Andrew's Stuff Screenshot" width="250" height="272">
    </a></aside>
    <p>This is the most recent iteration of my personal website. This time around it was created using the Zend Framework in fully-MVC mode, with semantic HTML5 markup and utilising some of the newer features of CSS3, such as shadows, gradients and rounded corners. The RSS feed still exists, and it now has a dedicated printer-friendly stylesheet and a dedicated mobile-device stylesheet, both of which are activated automatically when printing a page or viewing the site on a small-screen mobile device (smartphones, not tablets), respectively.</p>
    <p>As this is only my personal site, very little effort was put into making the design work fully in all browsers. As such, older browser versions (especially of Internet Explorer) will have some style quirks, such as lacking support for the gradient backgrounds, shadows or rounded corners. However, all browsers should at least be able to display the site in a way that makes it readable and usable, if not necessarily pretty - even down to IE6.</p>
</section>
    
<section class="portfoliosite">
    <h2><a href="http://www.andrewgillard.com/furcode.php">Furry Code Generator</a><span class="pfdate">2012</span></h2>
    <h3><span class="pftech">HTML5; JavaScript; <a href="http://jquery.com/">jQuery</a> + <a href="http://jqueryui.com/">UI</a>; CSS3</span></h3>
    <aside><a href="<?php echo $this->baseUrl() ?>/img/portfolio/furcodegenerator.png">
        <img src="<?php echo $this->baseUrl() ?>/img/portfolio/th_furcodegenerator.jpg" alt="Furry Code Generator Screenshot" width="250" height="254">
    </a></aside>
    <p>You may have heard of the <a href="http://www.geekcode.com/">Geek Code</a> - essentially a way to describe one's "geekiness" in the form of a string of characters - although, being originally written in 1993 and not receiving an updated since 1996, it is greatly showing its age these days (with a heavy emphasis on UNIX flavours besides Linux, discussion of Netscape as a major Web browser, Windows not existing beyond Windows 95, OS/2 mentions and even VMS - oh, and apparently DOOM is the best game ever). Well, this is the same thing, but for <a href="http://en.wikifur.com/wiki/Furry">furries</a>.</p>
    <p>Given the complexity of these codes, many people have written encoder and decoder applications or websites for the geek code, furry code and the other "codes", however, due to the age of these codes (few, if any, received any attention after the 1990s...), the interfaces are similarly dated. I decided that it was high time to bring the furry code kicking and screaming (or, perhaps, barking and meowing) into the 21st century.</p>
    <p>This script, therefore, is a complex work of JavaScript, jQuery and jQuery UI. PHP is involved in generating the HTML, but only to reduce the repetitiveness and redundancy of the source code - if one were to save the generated HTML, it would run quite happily in any modern Web browser.</p>
    <p>This script makes extremely heavy use of jQuery UI for its interface, to the point that it can take a couple of seconds simply to render the HTML and execute the JavaScript when the page loads, even with 2012's JavaScript engines such as <a href="http://en.wikipedia.org/wiki/SpiderMonkey_(JavaScript_engine)">SpiderMonkey</a> (Firefox) and <a href="http://en.wikipedia.org/wiki/V8_(JavaScript_engine)">V8</a> (Chrome) - unfortunately, no amount of JavaScript compiling will increase the speed of DOM manipulations, and that is what the vast majority of the code in this project does (primarily it's the calls to jQuery UI's <span class="code">button()</span> method to convert checkboxes and radio buttons to more consistently- and attractively-styled buttons).</p>
    <p>In fact, it can be enlightening to view the page with JavaScript disabled (and with one CSS tweak to make the tables actually visible), so that <a href="<?php echo $this->baseUrl() ?>/img/portfolio/furcodegenerator_nojs.png">it becomes clear just how much of the page is rendered dynamically</a>. Of note is that all buttons revert back to being either radio buttons or checkboxes, and all without labels - their labels are read, by JavaScript, from HTML5 "data" attributes on the buttons themselves. The "Jump To Section" box also stops functioning and becomes empty, as it is populated solely based on the content of the page.</p>
</section>

<section class="portfoliosite">
    <h2><a href="<?php echo $this->baseUrl() ?>/gallery-demo/">Simple Image Gallery</a><span class="pfdate">2011â€“2012</span></h2>
    <h3><span class="pftech">PHP; <a href="http://www.php.net/manual/en/book.image.php">PHP GD</a>; <a href="http://www.php.net/manual/en/book.exif.php">JPEG EXIF</a>; <a href="http://jquery.com/">jQuery</a>; CSS3; Mobile Support; <a href="https://developers.google.com/maps/documentation/geocoding/">Google Geocoding API</a></span></h3>
    <aside><a href="<?php echo $this->baseUrl() ?>/img/portfolio/gallery.png">
        <img src="<?php echo $this->baseUrl() ?>/img/portfolio/th_gallery.jpg" alt="Simple Image Gallery Screenshot" width="250" height="327">
    </a></aside>
    <p>This script was designed to be a very simple, graphical replacement for the Apache Web server's <a href="http://httpd.apache.org/docs/2.0/mod/mod_autoindex.html">autoindex module</a> - i.e. the script could be placed inside a directory of image files and it would, when accessed, automatically display a list of the images in that directory, along with showing thumbnails and the EXIF data stored by digital cameras, if applicable.</p>
    <p>This script is also designed to display conveniently on mobile devices, where it transforms into a single column of images instead of its normal grid formation.</p>
    <p>As part of its display of digital cameras' EXIF data, if there is any geographical information stored in the image (rare with standalone digital cameras, but very common among smartphones' cameras), it will use the Google Geocoding API to translate the stored latitude/longitude coordinates into a human-readable address, as well as linking to the Google Map view of the exact location. This can be used to excellent effect when the photo's subject is a large feature of the landscape, such as <a href="<?php echo $this->baseUrl() ?>/gallery-demo/?file=IMAG0217.jpg">this photograph of a recessed, circular area in Basingstoke Common</a>, where the <a href="http://maps.google.co.uk/maps?q=N51%C2%B015%2755.9%22+W1%C2%B03%2735.17%22">Google Maps satellite view for the image's coordinates</a> accurately shows the location from which the image was taken and offers an alternate perspective of the same area of land.</p>
</section>

<section class="portfoliosite">
    <h2><a href="<?php echo $this->baseUrl() ?>/shopping-list-demo/">Simple Shopping List</a><span class="pfdate">2011-2012</span></h2>
    <h3><span class="pftech">HTML5; <a href="http://jquery.com/">jQuery</a> + <a href="http://jqueryui.com/">UI</a>; CSS3; Mobile Support; Offline Web App</span></h3>
    <aside><a href="<?php echo $this->baseUrl() ?>/img/portfolio/shoppinglist.png">
        <img src="<?php echo $this->baseUrl() ?>/img/portfolio/th_shoppinglist.jpg" alt="Simple Shopping List Screenshot" width="250" height="188">
    </a></aside>
    <p>I created this Web app because I was unable to find a shopping list application for my phone with the features that I required without having <strong>too many</strong> features and, therefore, becoming bloated and confusing. Therefore, I designed this application to do exactly what I need it to do and, as such, it has no real configuration to speak of and the list of displayed products is stored as a PHP array in a hard-coded file on the server, with no user interface for editing it.</p>
    <p>This Web app utilises HTML5's "offline" support to allow it to be used even without an Internet connection, which is a vital feature when using the app inside a supermarket, where the mobile signal is often very poor or non-existent. It also uses custom mobile CSS to ensure that it is as user-friendly on mobile devices as is possible.</p>
</section>

<section class="portfoliosite">
    <h2><a href="<?php echo $this->baseUrl() ?>/img/portfolio/viper-cart-screens/">Viper Cart</a><span class="pfdate">2007-2012</span></h2>
    <h3>
        <span class="pftech">
            PHP; PDO/MySQL; <abbr title="Craig Brass Systems">CBS</abbr> Framework; JavaScript; <a href="http://jquery.com/">jQuery</a> + <a href="http://jqueryui.com/">UI</a>; <a href="http://www.opensearch.org/Home">OpenSearch</a>; <a href="http://www.sitemaps.org/">Sitemaps</a>; IPv6 Support; HTML5 (FileReader, Ajax file uploads);<br>
            Payment Gateway Integration (<a href="https://checkout.google.com/">Google Checkout</a>, PayPal <a href="https://www.paypal-business.co.uk/add-paypal-to-online-shop/index.htm">Checkout</a> + <a href="https://www.paypal-business.co.uk/accept-online-payments-with-paypal/index.htm">Payments</a>, HSBC, <a href="http://www.nochex.com/">NoChex</a>, <a href="http://www.worldpay.com/">WorldPay</a>, etc.);<br>
            Courier Tracking Integration (City Link, USPS, DHL)</span>
    </h3>
    <aside><a href="<?php echo $this->baseUrl() ?>/img/portfolio/vipercart.png">
        <img src="<?php echo $this->baseUrl() ?>/img/portfolio/th_vipercart.jpg" alt="Viper Cart Screenshot" width="250" height="495">
    </a></aside>
    <p><a href="http://www.vipercart.com/index.php">Viper Cart</a>, an e-commerce/shopping cart platform, was the primary software product that I developed at my previous job, at <a href="http://www.craigbrasssystems.com/">Craig Brass Systems Ltd.</a>. It was created with two goals in mind: to replace the cart software that was powering the existing <a href="http://www.itselixir.com/">Its Elixir</a> store, and then to sell the finished software product to other businesses looking for a similar solution. The development of Viper Cart spanned several years, starting while I was working for the company during the industrial placement year of my university course, and then continuing after I graduated. For much of that time period I was working alone which, while slowing down development somewhat, did give me a great deal of freedom to implement functionality as I saw fit and removed the inevitible complexities of working as a team. However, for a couple of years we had some additional developers working for us, during which time my job also involved managing those developers, reviewing their code and ensuring that it was of a suitable quality and wasn't buggy or insecure.</p>
    <p>A major component of Viper Cart was the creation of a framework - a large collection of classes that were designed to be portable and easily used in other projects in order to speed up development by re-using common components and functionality. This became known as the Craig Brass Systems Framework, or "CBS Framework", as I've referred to it elsewhere on this page. By the end of the development process, the CBS Framework consisted of more than 45,000 lines of PHP code spread over 150 classes, in addition to four third-party libraries (<a href="http://swiftmailer.org/">SwiftMailer</a>, <a href="http://sourceforge.net/projects/nusoap/">NuSOAP</a>, <a href="http://mailchimp.com/">MailChimp</a> and <a href="http://code.google.com/p/php-email-address-validation/">an email address validation class</a>). The framework allowed easy use of, amongst other things, our templating system, user-input validation, database access (wrapping <a href="http://uk.php.net/manual/en/book.pdo.php">PDO</a>, which I consider to be overly verbose in normal usage), error-handling/reporting, Ajax functions, caching, CAPTCHA image-generation, an extensive date/time class, access to functions for formatting filesizes, English sentences and similar, a class to easily and transparently handle IPv4 and IPv6 addresses including range calculations and database storage, pagination, currency display and manipulation, and sessions. Several large JavaScript classes, totalling almost 7,000 lines, were also created as part of the framework, providing Ajax, user-input validation and graphical dialog box (replacing JavaScript's native <span class="code">alert()</span>, <span class="code">prompt()</span> and <span class="code">confirm()</span> functions, which Internet Explorer has started being awkward with) functionality, amongst other features.</p>
    <p>This framework and the JavaScript classes were created because, when the project was started in 2007, products such as the <a href="http://framework.zend.com/">Zend Framework</a> and <a href="http://jquery.com/">jQuery</a> were in their infancy and not well-known or widely-used. <a href="http://jqueryui.com/">jQuery UI</a> hadn't even been released at that time. Later in the development process, we did start using jQuery and jQuery UI to speed up development, and I wrote several plugins to ease the use of certain functionality.</p>
    <p>I also created <a href="http://www.coolapplab.com/version_control_subversion_database_importer_exporter/index.html">a PHP script for exporting a MySQL database to a format that makes sense for version control systems</a> (two files for each table - a file to define the structure and a file containing the table data, with one record per line, so that `diff`s between two versions would be readable and useful), as well as importing the same files back into the database when another developer has updated them. I also wrote a 9,000-line installation script that downloads, extracts and installs the entirety of Viper Cart, sets up the database and configures the software as desired by the user; a 6,000-line upgrade script which, rather than blindly replacing changed files, applies a "diff" of changes to the existing file (performing some initial sanity checks first), so that, in theory, users' own modifications to the software can be retained, which will hopefully result in adminstrators being more willing to upgrade/patch their installations, knowing that there's a good chance that upgrading <strong>won't</strong> revert their modifications; and a 4,500-line PHP script to generate both the install and upgrade scripts by exporting requested revisions from version control and packaging up both the most recent version and the modifications between the two specified revisions.</p>
    <p>Viper Cart integrated with many payment gateways, including <a href="https://www.2checkout.com/">2CheckOut</a>, <a href="http://www.authorize.net/">Authorize.Net</a>, Direct One, HSBC, <a href="http://www.nochex.com/">NoChex</a>, PayPal, SagePay, <a href="http://www.worldpay.com/">WorldPay</a> and Google Checkout, and also integrated with Google's Products system. These payment gateways were implemented as part of a plug-in system that was designed to allow new gateways to be added with just the addition of an extra PHP class file, and no changes to the existing code. It was designed from the ground-up to be search engine-friendly and, to that end, each product, category, manufacturer, news article and information page had what we referred to as a "SEO name" - an alphanumeric string that was used to reference that entity in the URL. This allowed Viper Cart's URLs to look like "/manufacturer/example-manufacturer/index.html" instead of the more common, but arguably cheating, SEO URL method of "/manufacturer/123-example-manufacturer.html", with the entity's numeric ID in the URL and the system's page dispatcher would ignore the name and only read the ID. I also created a <a href="http://www.sitemaps.org/">Sitemaps</a> group of classes that produced the required XML for search engines supporting the Sitemaps system.</p>
    <p>Other notable features that I wrote for Viper Cart include giving it <a href="<?php echo $this->baseUrl() ?>/img/portfolio/viper-cart-screens/?file=ACP%20-%20IP%20Address%20Management.png">full IPv6 support</a>, an <a href="http://www.opensearch.org/">OpenSearch</a> widget, a <a href="<?php echo $this->baseUrl() ?>/img/portfolio/viper-cart-screens/?file=VC%20-%20Search%20Form.png">custom, advanced product search system</a>, a <a href="<?php echo $this->baseUrl() ?>/img/portfolio/viper-cart-screens/?file=ACP%20-%20Users%20Online.png">Web browser user-agent analyser</a> (including support for several mobile devices) for statistics collection, and <a href="<?php echo $this->baseUrl() ?>/img/portfolio/viper-cart-screens/?file=ACP%20-%20Admin%20Permissions.png">fine-grained access control lists</a> (ACLs) for the adminstration system. It also integrated with the <a href="http://www.postcodeanywhere.co.uk/">Postcode Anywhere</a> API and a database of USA ZIP codes and Canadian post codes in order to do post/zip code-to-address lookups for customers in the US, UK and Canada, saving customers time when entering addresses and helping to ensure that addresses are entered accurately.</p>
    <p>Having <a href="http://www.itselixir.com/">Its Elixir</a> using an early version of the software provided invaluable real-world usage and testing data, as well as an extensive database of product and customer data that greatly aided in development. The version of Viper Cart currently running on Its Elixir is a couple of years old, however most of the changes since then have been in the creation of the administator control panel; the customer side of the software is fully-functional.</p>
</section>

<section class="portfoliosite">
    <h2><a href="http://www.craigbrasssystems.com/">Craig Brass Systems</a><span class="pfdate">2008â€“2011</span></h2>
    <h3><span class="pftech">PHP; PDO/MySQL; <abbr title="Craig Brass Systems">CBS</abbr> Framework; <a href="http://www.invisionpower.com/products/board/"><abbr title="Invision Power Board aka IP.Board">IPB</abbr></a> Integration; Payment Gateway Integration</span></h3>
    <aside><a href="<?php echo $this->baseUrl() ?>/img/portfolio/craigbrassssytems.png">
        <img src="<?php echo $this->baseUrl() ?>/img/portfolio/th_craigbrasssystems.jpg" alt="Craig Brass Systems Screenshot" width="250" height="218">
    </a></aside>
    <p>The Craig Brass Systems website is the corporate site for my former employer. It consists of various informational pages, pulls data from both IP.Board and an OpenFire XMPP messaging server, and has a login-protected customer area allowing customers to place orders, download purchased software products and submit support tickets. This site also uses the CBS Framework.</p>
    <p>As this site has an order process, it integrates with payment gateways to allow customers to securely make payments on a third party website (either PayPal or Worldpay) before being redirected back to this site to download their purchased software.</p>
</section>

<section class="portfoliosite">
    <h2><a href="<?php echo $this->baseUrl() ?>/img/portfolio/lorddeathnet-screens/">Lord d'Eath's Stuff</a><span class="pfdate">2004â€“2011</span></h2>
    <h3><span class="pftech">PHP; MySQL; XHTML; <a href="http://www.smarty.net/">Smarty</a></span></h3>
    <aside><a href="<?php echo $this->baseUrl() ?>/img/portfolio/lorddeathnet.png">
        <img src="<?php echo $this->baseUrl() ?>/img/portfolio/th_lorddeathnet.jpg" alt="Lord d'Eath's Stuff Screenshot" width="250" height="267">
    </a></aside>
    <p>This is the previous incarnation of this very website, my personal blog-and-such site. I created it in 2004, using MySQL to store the blog posts, comments and gallery information, and with Smarty as the templating engine. The main system behind this site didn't then change much until 2012 when the entire site was re-created (see its own entry above).</p>
    <p>One major change that I did make more recently was the addition of Search Engine Optimisation (SEO) techniques, primarily to the URLs used. This changed the URLs from being, for example, http://www.lorddeath.net/?page=blog to being http://www.lorddeath.net/Blog/.</p>
</section>

<section class="portfoliosite">
    <h2><a href="http://www.craigbrass.net/">Craig Brass' Blog</a><span class="pfdate">2009</span></h2>
    <h3><span class="pftech">PHP; PDO/MySQL; XHTML; <abbr title="Craig Brass Systems">CBS</abbr> Framework; <a href="https://dev.twitter.com/">Twitter</a>, <a href="http://www.flickr.com/services/api/">Flickr</a> &amp; <a href="https://developers.google.com/youtube/">YouTube</a> APIs</span></h3>
    <aside><a href="<?php echo $this->baseUrl() ?>/img/portfolio/craigbrassnet.png">
        <img src="<?php echo $this->baseUrl() ?>/img/portfolio/th_craigbrassnet.jpg" alt="Craig Brass' Blog Screenshot" width="250" height="238">
    </a></aside>
    <p>I created this website in a few weeks for my previous employer to be used as his personal site to host a blog and a few information pages. It utilises the aforementioned CBS Framework, and pulls in data from Twitter, Flickr and YouTube. The graphical design of this site was created by a third-party designer, though I wrote most of the HTML for it.</p>
</section>

<article class="portfoliosite">
    <h2><a href="http://www.web2messenger.com/">Web2Messenger</a><span class="pfdate">2005â€“2008</span></h2>
    <h3><span class="pftech">PHP; MySQL; <a href="http://en.wikipedia.org/wiki/Microsoft_Notification_Protocol">MSN Messenger Service</a>; XHTML; <a href="http://www.smarty.net/">Smarty</a></span></h3>
    <aside><a href="<?php echo $this->baseUrl() ?>/img/portfolio/web2messenger.png">
        <img src="<?php echo $this->baseUrl() ?>/img/portfolio/th_web2messenger.jpg" alt="Web2Messenger Screenshot" width="250" height="270">
    </a></aside>
    <p>Web2Messenger was a joint project between me and a Dutch friend of mine, Frans-Willem Hardijzer that allows users to receive anonymous messages from their own Web sites directly to their .NET Messenger Service client such as Windows Live Messenger, as well as utilising dynamically-generated images detailing their online status.  Due to time constraints and others reasons, we had to shut down Web2Messenger in 2011, though its development had been stagnant since 2008 and it was seeing very little use. By the time we shut it down, the service had delivered almost 70,000 messages to more than 16,000 users, making it by far my most-used website.</p>
    <p>The server-side code is PHP utilising Smarty and MySQL with the client-side code being a mix of XHTML 1.0, CSS and JavaScript, and a RSS feed is available.  The back-end "bot" processes that connect to the Messenger Service were originally written by me in PHP, however they were subsequently re-written, by Frans-Willem, in C++ for performance reasons.  Web2Messenger has also been translated into Spanish, French and Portuguese and the language of the whole Web site can be changed instantly and updated easily if necessary.</p>
    <p>Towards the end of the useful lifetime of Web2Messenger, I created a Facebook application that inserted the user's Messenger status on their Facebook profiles, together with a link back to that user's Web2Messenger page, allowing profile visitors to send them instant messages.</p>
    <p>Even though the service has been shut down, the website is still running for historical interest. I also have a more in-depth article about Web2Messenger on the <a href="<?php echo $this->url(array('controller'=>'web2messenger'), 'default', true) ?>">Web2Messenger page of this site</a>.</p>
</article>

<section class="portfoliosite">
    <h2><a href="http://www.udcx.com/">Unofficial Dark Century: X</a><span class="pfdate">2004â€“2006</span></h2>
    <h3><span class="pftech">PHP; MySQL</span></h3>
    <aside><a href="<?php echo $this->baseUrl() ?>/img/portfolio/udcx.png">
        <img src="<?php echo $this->baseUrl() ?>/img/portfolio/th_udcx.jpg" alt="uDCX Screenshot" width="250" height="315">
    </a></aside>
    <p>A fan-site for an on-line Role-Playing Game (RPG) I used to play regularly, Neverwinter Nights, uDCX is primarily a collection of guides and similar documents and, as such, doesn't use MySQL very much, but the standard PHP, XHTML 1.0, CSS and JavaScript combination is still employed.  The colour scheme of this site was chosen to fit with the game itself, which has a very dark interface - I do not, generally, make a habit of designing sites with such a heavy use of black as this one does. The code behind this website was mostly written by me, with a friend and fellow gamer writing most of the content and playing a large part in the site's graphical design.</p>
</section>

<section class="portfoliosite">
    <h2><a href="http://www.udcx.com/GMaps/">Google Maps API-powered uDCX Maps</a><span class="pfdate">2006</span></h2>
    <h3><span class="pftech">PHP; XHTML; JavaScript; <a href="https://developers.google.com/maps/">Google Maps API</a></span></h3>
    <aside><a href="<?php echo $this->baseUrl() ?>/img/portfolio/udcx_gmaps.png">
        <img src="<?php echo $this->baseUrl() ?>/img/portfolio/th_udcx_gmaps.jpg" alt="uDCX Maps Screenshot" width="250" height="207">
    </a></aside>
    <p>An extension to the above site is this map of the DC:X game-world which is powered by the Google Maps API, including a completely custom "skin" (designed to replicate the in-game map interface) and tileset (which was created by manually piecing together screenshots of the in-game map - I had a lot more free time back then...). Using the API itself and creating the interactivity of the rest of the page vastly improved my JavaScript knowledge as well as allowing me to learn how to utilise the Google Maps API itself.</p>
</section>
